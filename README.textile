h2. Loggly .NET Driver

This is a .NET driver for "loggly.com":http://loggly.com.

h3. Logging Events

Create a new @Logger@ with your input key:
<pre>var logger = new Logger("my-long-key-that-i-got-when-setting-up-my-http-input");</pre>

Use either a synchronous or asynchronous @Log@ method.

To Log in a structured way that allows you to reliabily capture a Log Level and the Machine Name use:
<pre>logger.Log(StructuredLogLevel.debug, "machineName", "Log Message");</pre>

or for Async
<pre>logger.LogAsync(StructruedLogLevel.info, "machineName", "Log Message");</pre>

There are 5 different Log Levels available to you.  They are: 
@info@, @debug@, @warn@, @error@, @fatal@

If you want to log in plain text (esp if your Loggly input is already setup for text only), use the @Log@ method:
<pre>logger.log("This is my log message");</pre>

h3. Searching Events

First, setup the username/password you want to connect with:
<pre>LogglyConfiguration.Configure(c => c.AuthenticateWith("username", "password"));</pre>

Next, create a searcher with your domain:
<pre>var searcher = new Searcher("mydomain");</pre>

Finally, use the various @Search@ methods.

Note that searching happens synchronously.


h4. Facets

First, setup the username/password you want to connect with:
<pre>LogglyConfiguration.Configure(c => c.AuthenticateWith("username", "password"));</pre>

Next, create a facet with your domain:
<pre>var facet = new Facet("mydomain");</pre>

Finally, use the various @GetDate@, @GetIp@ and @GetInput* methods.

Getting facts is always synchronous